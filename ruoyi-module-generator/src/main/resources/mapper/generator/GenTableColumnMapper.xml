<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.generator.mapper.GenTableColumnMapper">

    <resultMap type="GenTableColumn" id="GenTableColumnResult">
        <id     property="columnId"       column="column_id"      />
        <result property="tableId"        column="table_id"       />
        <result property="columnName"     column="column_name"    />
        <result property="columnComment"  column="column_comment" />
        <result property="columnType"     column="column_type"    />
        <result property="columnMaxLength"  column="column_max_length" />
        <result property="javaType"       column="java_type"      />
        <result property="javaField"      column="java_field"     />
        <result property="isPk"           column="is_pk"          />
        <result property="isIncrement"    column="is_increment"   />
        <result property="isRequired"     column="is_required"    />
        <result property="isInsert"       column="is_insert"      />
        <result property="isEdit"         column="is_edit"        />
        <result property="isList"         column="is_list"        />
        <result property="isVoRequired"         column="is_vo_required"        />
        <result property="isQuery"        column="is_query"       />
        <result property="queryType"      column="query_type"     />
        <result property="htmlType"       column="html_type"      />
        <result property="dictType"       column="dict_type"      />
        <result property="sort"           column="sort"           />
        <result property="createBy"       column="create_by"      />
        <result property="createTime"     column="create_time"    />
        <result property="updateBy"       column="update_by"      />
        <result property="updateTime"     column="update_time"    />
    </resultMap>

    <select id="selectDbTableColumnsByName" parameterType="String" resultMap="GenTableColumnResult">
        <if test="@com.ruoyi.common.helper.DataBaseHelper@isMySql()">
            select column_name,
--                    是否必须的条件: 非空 并且 不是主键 并且 默认值为空
                   (case when (is_nullable = 'no' AND column_key != 'PRI' AND column_default is null ) then 'YES' else 'NO' end) as is_required,
--                    是否主键的条件: key为PRI
                   (case when column_key = 'PRI' then 'YES' else 'NO' end) as is_pk,
--                    是否查询的条件（用于条件查询的字段）: key不为空 并且 不为PRI
                   (case when (column_key != '' AND column_key != 'PRI') then 'YES' else 'NO' end) as is_query,
--                    是否VO必须的条件（用于生成VO对象的是否必须返回）: 主键 或者 默认值不为空 或者 不为空
                   (case when column_key = 'PRI' OR column_default is not null OR is_nullable = 'no'  then 'YES' else 'NO' end) as is_vo_required,
                   ordinal_position as sort,
                   column_comment,
--                    是否自增
                   (case when extra = 'auto_increment' then 'YES' else 'NO' end) as is_increment,
--                    如果是字符串 读取字符串的限制信息
                   (case when ( INSTR(data_type, 'char')>0 OR INSTR(data_type, 'text')>0 ) then character_maximum_length else null end) as column_max_length,
                   column_type
            from information_schema.columns where table_schema = (select database()) and table_name = (#{tableName})
            order by ordinal_position
        </if>
        <if test="@com.ruoyi.common.helper.DataBaseHelper@isPostgerSql()">
            SELECT column_name, is_required, is_pk, sort, column_comment, is_increment, column_type
            FROM (
                SELECT c.relname AS table_name,
                       a.attname AS column_name,
                       d.description AS column_comment,
                       CASE WHEN a.attnotnull AND con.conname IS NULL THEN 'YES' ELSE 'NO'
                       END AS is_required,
                       CASE WHEN con.conname IS NOT NULL THEN 'YES' ELSE 'NO'
                       END AS is_pk,
                       a.attnum AS sort,
                       CASE WHEN "position"(pg_get_expr(ad.adbin, ad.adrelid),
                           ((c.relname::text || '_'::text) || a.attname::text) || '_seq'::text) > 0 THEN 'YES' ELSE 'NO'
                       END AS is_increment,
                       btrim(
                           CASE WHEN t.typelem <![CDATA[ <> ]]> 0::oid AND t.typlen = '-1'::integer THEN 'ARRAY'::text ELSE
                                CASE WHEN t.typtype = 'd'::"char" THEN format_type(t.typbasetype, NULL::integer)
                                ELSE format_type(a.atttypid, NULL::integer) END
                           END, '"'::text
                       ) AS column_type
                FROM pg_attribute a
                    JOIN (pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid) ON a.attrelid = c.oid
                    LEFT JOIN pg_description d ON d.objoid = c.oid AND a.attnum = d.objsubid
                    LEFT JOIN pg_constraint con ON con.conrelid = c.oid AND (a.attnum = ANY (con.conkey))
                    LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid AND a.attnum = ad.adnum
                    LEFT JOIN pg_type t ON a.atttypid = t.oid
                WHERE (c.relkind = ANY (ARRAY ['r'::"char", 'p'::"char"]))
                    AND a.attnum > 0
                    AND n.nspname = 'public'::name
                ORDER BY c.relname, a.attnum
            ) temp
            WHERE table_name = (#{tableName})
        </if>

    </select>

</mapper>
